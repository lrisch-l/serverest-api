{
  "stats": {
    "suites": 1,
    "tests": 10,
    "passes": 10,
    "pending": 0,
    "failures": 0,
    "start": "2025-09-29T22:21:26.650Z",
    "end": "2025-09-29T22:21:29.727Z",
    "duration": 3077,
    "testsRegistered": 10,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "83b2435c-33c6-4447-832e-80593119e5fa",
      "title": "",
      "fullFile": "cypress\\e2e\\api\\usuarios\\usuarios.cy.js",
      "file": "cypress\\e2e\\api\\usuarios\\usuarios.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "3ecad0b9-d8e2-4da2-9fa1-344777c76787",
          "title": "Users API",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return 200 and retrieve a list of users",
              "fullTitle": "Users API should return 200 and retrieve a list of users",
              "timedOut": null,
              "duration": 471,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.getUsers().then(res => {\n  expect(res.status).to.eq(200);\n  expect(res.body.quantidade).to.be.greaterThan(0);\n  expect(res.body.usuarios[0]).to.have.all.keys('nome', 'email', 'password', 'administrador', '_id');\n});",
              "err": {},
              "uuid": "32a99301-a571-424d-97e2-60e0cce87254",
              "parentUUID": "3ecad0b9-d8e2-4da2-9fa1-344777c76787",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 201 and create a new user successfully",
              "fullTitle": "Users API should return 201 and create a new user successfully",
              "timedOut": null,
              "duration": 212,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.createUser(user).then(res => {\n  expect(res.status).to.eq(201);\n  expect(res.body.message).to.include('Cadastro realizado com sucesso');\n  expect(res.body._id).to.be.a('string');\n  createdId = res.body._id;\n});",
              "err": {},
              "uuid": "20f8ec15-3b59-4e3c-b030-66258414af8b",
              "parentUUID": "3ecad0b9-d8e2-4da2-9fa1-344777c76787",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 400 when creating a user with a duplicate email",
              "fullTitle": "Users API should return 400 when creating a user with a duplicate email",
              "timedOut": null,
              "duration": 198,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.createUser(user).then(res => {\n  expect(res.status).to.eq(400);\n  expect(res.body.message).to.eq('Este email já está sendo usado');\n});",
              "err": {},
              "uuid": "aef6cd36-986a-4574-8e93-d17927f915bc",
              "parentUUID": "3ecad0b9-d8e2-4da2-9fa1-344777c76787",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 200 and retrieve a user by ID",
              "fullTitle": "Users API should return 200 and retrieve a user by ID",
              "timedOut": null,
              "duration": 190,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.getUserById(createdId).then(res => {\n  expect(res.status).to.eq(200);\n  expect(res.body._id).to.eq(createdId);\n});",
              "err": {},
              "uuid": "ceab1736-c3d2-4323-9bc6-c826b5928c18",
              "parentUUID": "3ecad0b9-d8e2-4da2-9fa1-344777c76787",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 400 when retrieving a nonexistent user by ID",
              "fullTitle": "Users API should return 400 when retrieving a nonexistent user by ID",
              "timedOut": null,
              "duration": 211,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.getUserById('999999999999999999999999999999').then(res => {\n  expect(res.status).to.eq(400);\n  if (res.body && res.body.message) {\n    expect(res.body.message).to.include('Usuário não encontrado');\n  } else {\n    cy.log('⚠️ Response body is missing or undefined');\n  }\n});",
              "err": {},
              "uuid": "fb5d083d-98db-456d-a356-303d0cf3e94a",
              "parentUUID": "3ecad0b9-d8e2-4da2-9fa1-344777c76787",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 200 when updating an existing user",
              "fullTitle": "Users API should return 200 when updating an existing user",
              "timedOut": null,
              "duration": 192,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const updated = _objectSpread(_objectSpread({}, user), {}, {\n  nome: 'Fulano Atualizado',\n  email: `updated.${Date.now()}@qa.com.br`\n});\ncy.updateUser(createdId, updated).then(res => {\n  expect(res.status).to.eq(200);\n  expect(res.body.message).to.include('Registro alterado com sucesso');\n});",
              "err": {},
              "uuid": "4f4114ac-83b4-4335-bcdc-ab5154c9b629",
              "parentUUID": "3ecad0b9-d8e2-4da2-9fa1-344777c76787",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 400 when updating a user with an email that already exists",
              "fullTitle": "Users API should return 400 when updating a user with an email that already exists",
              "timedOut": null,
              "duration": 559,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const userA = {\n  nome: 'User A',\n  email: `userA.${Date.now()}@qa.com.br`,\n  password: 'abc',\n  administrador: 'true'\n};\nconst userB = {\n  nome: 'User B',\n  email: `userB.${Date.now()}@qa.com.br`,\n  password: 'def',\n  administrador: 'true'\n};\nlet userBId = '';\ncy.createUser(userA).then(() => {\n  cy.createUser(userB).then(resB => {\n    userBId = resB.body._id;\n    cy.updateUser(userBId, _objectSpread(_objectSpread({}, userB), {}, {\n      email: userA.email\n    })).then(res => {\n      expect(res.status).to.eq(400);\n      expect(res.body.message).to.include('Este email já está sendo usado');\n    });\n  });\n});",
              "err": {},
              "uuid": "5395eccd-22e6-4533-b76e-460b37c6789c",
              "parentUUID": "3ecad0b9-d8e2-4da2-9fa1-344777c76787",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 201 and create a user when updating a nonexistent ID",
              "fullTitle": "Users API should return 201 and create a user when updating a nonexistent ID",
              "timedOut": null,
              "duration": 207,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const ghostUser = {\n  nome: 'Ghost User',\n  email: `ghost.${Date.now()}@qa.com.br`,\n  password: 'invisivel',\n  administrador: 'false'\n};\ncy.updateUser('ffffffffffffffffffffffff', ghostUser).then(res => {\n  expect(res.status).to.eq(201);\n  expect(res.body.message).to.include('Cadastro realizado com sucesso');\n  expect(res.body._id).to.be.a('string');\n});",
              "err": {},
              "uuid": "6e1e523e-338d-4226-92ae-222492c87108",
              "parentUUID": "3ecad0b9-d8e2-4da2-9fa1-344777c76787",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 200 and delete an existing user",
              "fullTitle": "Users API should return 200 and delete an existing user",
              "timedOut": null,
              "duration": 192,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.deleteUser(createdId).then(res => {\n  expect(res.status).to.eq(200);\n  expect(res.body.message).to.match(/sucesso|Nenhum registro/);\n});",
              "err": {},
              "uuid": "175092f3-b457-4ae1-afd3-4ee4213e7525",
              "parentUUID": "3ecad0b9-d8e2-4da2-9fa1-344777c76787",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 200 and message when deleting a nonexistent user",
              "fullTitle": "Users API should return 200 and message when deleting a nonexistent user",
              "timedOut": null,
              "duration": 187,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.deleteUser('999999999999999999999999999999').then(res => {\n  expect(res.status).to.eq(200);\n  expect(res.body.message).to.match(/Registro inexistente|Nenhum registro/);\n});",
              "err": {},
              "uuid": "5f8d32bc-e1fd-40d7-b1b6-659aca6c72ad",
              "parentUUID": "3ecad0b9-d8e2-4da2-9fa1-344777c76787",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "32a99301-a571-424d-97e2-60e0cce87254",
            "20f8ec15-3b59-4e3c-b030-66258414af8b",
            "aef6cd36-986a-4574-8e93-d17927f915bc",
            "ceab1736-c3d2-4323-9bc6-c826b5928c18",
            "fb5d083d-98db-456d-a356-303d0cf3e94a",
            "4f4114ac-83b4-4335-bcdc-ab5154c9b629",
            "5395eccd-22e6-4533-b76e-460b37c6789c",
            "6e1e523e-338d-4226-92ae-222492c87108",
            "175092f3-b457-4ae1-afd3-4ee4213e7525",
            "5f8d32bc-e1fd-40d7-b1b6-659aca6c72ad"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2619,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": false,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.4"
    },
    "marge": {
      "options": {
        "reportDir": "cypress/reports",
        "overwrite": false,
        "html": false,
        "json": true
      },
      "version": "6.3.0"
    }
  }
}