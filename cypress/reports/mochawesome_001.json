{
  "stats": {
    "suites": 1,
    "tests": 10,
    "passes": 10,
    "pending": 0,
    "failures": 0,
    "start": "2025-09-29T22:21:19.072Z",
    "end": "2025-09-29T22:21:24.188Z",
    "duration": 5116,
    "testsRegistered": 10,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "1643f2db-182f-4735-bad8-5b40453b95cc",
      "title": "",
      "fullFile": "cypress\\e2e\\api\\produtos\\produtos.cy.js",
      "file": "cypress\\e2e\\api\\produtos\\produtos.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "c43d5480-2998-4ea5-98a8-40bc836d7627",
          "title": "Products API",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return 200 and list products",
              "fullTitle": "Products API should return 200 and list products",
              "timedOut": null,
              "duration": 676,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.getProducts().then(res => {\n  expect(res.status).to.eq(200);\n  expect(res.body.quantidade).to.be.greaterThan(0);\n  expect(res.body.produtos[0]).to.have.all.keys('nome', 'preco', 'descricao', 'quantidade', '_id');\n});",
              "err": {},
              "uuid": "c105c3dc-be4c-4093-bd0f-e2f79eaf50cc",
              "parentUUID": "c43d5480-2998-4ea5-98a8-40bc836d7627",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 201 and create a new product",
              "fullTitle": "Products API should return 201 and create a new product",
              "timedOut": null,
              "duration": 384,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.get('@adminToken').then(token => {\n  cy.createProduct(product, token).then(res => {\n    expect(res.status).to.eq(201);\n    expect(res.body.message).to.include('Cadastro realizado com sucesso');\n    expect(res.body._id).to.be.a('string');\n    createdProductId = res.body._id;\n  });\n});",
              "err": {},
              "uuid": "9b7338e6-068d-4b7b-ba5d-36aefa9d3c5f",
              "parentUUID": "c43d5480-2998-4ea5-98a8-40bc836d7627",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 400 when creating product with duplicate name",
              "fullTitle": "Products API should return 400 when creating product with duplicate name",
              "timedOut": null,
              "duration": 391,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.get('@adminToken').then(token => {\n  cy.createProduct(product, token).then(res => {\n    expect(res.status).to.eq(400);\n    expect(res.body.message).to.include('Já existe produto com esse nome');\n  });\n});",
              "err": {},
              "uuid": "9749aa4f-fa8e-41d1-9c07-faee79a4c1ae",
              "parentUUID": "c43d5480-2998-4ea5-98a8-40bc836d7627",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 401 when creating product without token",
              "fullTitle": "Products API should return 401 when creating product without token",
              "timedOut": null,
              "duration": 377,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.cadastrarProduto(product, '').then(res => {\n  expect(res.status).to.eq(401);\n  expect(res.body.message).to.include('Token de acesso ausente');\n});",
              "err": {},
              "uuid": "07beb6d4-da80-46a3-9e52-6f594712f837",
              "parentUUID": "c43d5480-2998-4ea5-98a8-40bc836d7627",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 403 when non-admin tries to create a product",
              "fullTitle": "Products API should return 403 when non-admin tries to create a product",
              "timedOut": null,
              "duration": 707,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const normalUser = {\n  nome: 'User Test',\n  email: `user.${Date.now()}@qa.com.br`,\n  password: '123456',\n  administrador: 'false'\n};\ncy.createUser(normalUser).then(() => {\n  cy.loginUser(normalUser.email, normalUser.password).then(resLogin => {\n    const userToken = resLogin.body.authorization;\n    cy.createProduct(product, userToken).then(res => {\n      expect(res.status).to.eq(403);\n      expect(res.body.message).to.include('Rota exclusiva para administradores');\n    });\n  });\n});",
              "err": {},
              "uuid": "509ac8b3-5260-480e-9b89-73c34d7616bb",
              "parentUUID": "c43d5480-2998-4ea5-98a8-40bc836d7627",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 200 and retrieve product by ID",
              "fullTitle": "Products API should return 200 and retrieve product by ID",
              "timedOut": null,
              "duration": 418,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.getProductById(createdProductId).then(res => {\n  expect(res.status).to.eq(200);\n  expect(res.body).to.have.property('_id', createdProductId);\n  expect(res.body).to.have.property('nome');\n});",
              "err": {},
              "uuid": "ed14c5f0-e2f0-4595-a34a-96e826954b64",
              "parentUUID": "c43d5480-2998-4ea5-98a8-40bc836d7627",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 200 when updating a product",
              "fullTitle": "Products API should return 200 when updating a product",
              "timedOut": null,
              "duration": 386,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const updated = {\n  nome: `Updated ${product.nome}`,\n  preco: 110,\n  descricao: 'Updated via API',\n  quantidade: 5\n};\ncy.get('@adminToken').then(token => {\n  cy.updateProduct(createdProductId, updated, token).then(res => {\n    expect(res.status).to.eq(200);\n    expect(res.body.message).to.include('Registro alterado com sucesso');\n  });\n});",
              "err": {},
              "uuid": "1479bdb5-d1e2-40d9-9e5b-19ec951a31aa",
              "parentUUID": "c43d5480-2998-4ea5-98a8-40bc836d7627",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 200 and delete an existing product",
              "fullTitle": "Products API should return 200 and delete an existing product",
              "timedOut": null,
              "duration": 370,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.get('@adminToken').then(token => {\n  cy.deleteProduct(createdProductId, token).then(res => {\n    expect(res.status).to.eq(200);\n    expect(res.body.message).to.be.oneOf(['Registro excluído com sucesso', 'Registro excluído com sucesso | Nenhum registro excluído']);\n  });\n});",
              "err": {},
              "uuid": "99edb8b8-d142-4abf-969f-545dc9eff457",
              "parentUUID": "c43d5480-2998-4ea5-98a8-40bc836d7627",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 401 when trying to delete product without token",
              "fullTitle": "Products API should return 401 when trying to delete product without token",
              "timedOut": null,
              "duration": 372,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.deletarProduto('000000000000000000000000', '').then(res => {\n  expect(res.status).to.eq(401);\n  expect(res.body.message).to.include('Token de acesso ausente');\n});",
              "err": {},
              "uuid": "7508440a-306b-4c98-8905-577c0976e2d2",
              "parentUUID": "c43d5480-2998-4ea5-98a8-40bc836d7627",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 403 when a non-admin user tries to delete a product",
              "fullTitle": "Products API should return 403 when a non-admin user tries to delete a product",
              "timedOut": null,
              "duration": 740,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const newUser = {\n  nome: 'Common User',\n  email: `nonadmin.${Date.now()}@qa.com.br`,\n  password: 'senha',\n  administrador: 'false'\n};\ncy.createUser(newUser).then(() => {\n  cy.loginUser(newUser.email, newUser.password).then(resLogin => {\n    const nonAdminToken = resLogin.body.authorization;\n    cy.deletarProduto(createdProductId, nonAdminToken).then(res => {\n      expect(res.status).to.eq(403);\n      expect(res.body.message).to.include('Rota exclusiva para administradores');\n    });\n  });\n});",
              "err": {},
              "uuid": "73721a40-8a76-40bd-8363-a3918017f4fb",
              "parentUUID": "c43d5480-2998-4ea5-98a8-40bc836d7627",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "c105c3dc-be4c-4093-bd0f-e2f79eaf50cc",
            "9b7338e6-068d-4b7b-ba5d-36aefa9d3c5f",
            "9749aa4f-fa8e-41d1-9c07-faee79a4c1ae",
            "07beb6d4-da80-46a3-9e52-6f594712f837",
            "509ac8b3-5260-480e-9b89-73c34d7616bb",
            "ed14c5f0-e2f0-4595-a34a-96e826954b64",
            "1479bdb5-d1e2-40d9-9e5b-19ec951a31aa",
            "99edb8b8-d142-4abf-969f-545dc9eff457",
            "7508440a-306b-4c98-8905-577c0976e2d2",
            "73721a40-8a76-40bd-8363-a3918017f4fb"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 4821,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": false,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.4"
    },
    "marge": {
      "options": {
        "reportDir": "cypress/reports",
        "overwrite": false,
        "html": false,
        "json": true
      },
      "version": "6.3.0"
    }
  }
}